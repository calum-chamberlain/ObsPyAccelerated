#!/usr/bin/env python3
"""
Profile features - comparison between obspy and obscupy.
"""

import logging
import time

from typing import Union, Iterable, List, Tuple, Callable


Logger = logging.getLogger("Profiler")


def time_function(
    function: Callable,
    data_len: Union[int, Iterable],
    repeats: int = 3
) -> List[Tuple[int, float]]:
    """
    Time a given function.

    Parameters
    ----------
    function
    data_len
    repeats

    Returns
    -------

    """
    if not isinstance(data_len, Iterable):
        data_len = (data_len, )
    times = list()
    for _data_len in data_len:
        run_time = 0
        for repeat in range(repeats):
            Logger.debug(
                f"Running for data length: {_data_len}, repeat {repeat}")
            # TODO: time.time might not be the most accurate way to do this.
            tic = time.time()
            # TODO: Call function
            toc = time.time()
            run_time += (toc - tic)
        run_time /= repeats
        Logger.info(
            f"{function} took {run_time:0.2e}s for data length: {_data_len}")
        times.append((_data_len, run_time))
    return times


def plot_times(times: dict, data_len: Union[int, Iterable]):
    """
    Plot the time difference between obspy and obscupy

    Parameters
    ----------
    times
    data_len

    Returns
    -------

    """
    import matplotlib.pyplot as plt

    fig, ax = plt.subplots()

    return fig


def write_times(times: dict, data_len: Union[int, Iterable]):
    """
    Write out a csv of the times between obspy and obscupy.

    Parameters
    ----------
    times
    data_len

    Returns
    -------

    """
    return


def profile(function: str, data_len: Union[int, Iterable]):
    """
    Profile a given function or method.

    Parameters
    ----------
    function
    data_len

    Returns
    -------

    """
    import matplotlib.pyplot as plt

    obspy_function = function.split('.')
    obspy_function[-1] = "_" + obspy_function[-1]
    obspy_function = '.'.join(obspy_function)
    obspy_times = time_function(obspy_function, data_len)
    obscupy_times = time_function(function, data_len)

    times = {"ObsPy": obspy_times, "ObsCuPy": obscupy_times}
    print(times)
    fig = plot_times(times, data_len)
    plt.show()
    write_times(times, data_len)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser("ObsCuPy Profiler")

    parser.add_argument(
        "-f", "--function", help="Function to profile", type=str,
        required=True)
    parser.add_argument(
        "-l", "--data-len", help="Length(s) of data to run for",
        default=8640000)

    args = parser.parse_args()
    profile(args.function, args.data_len)
